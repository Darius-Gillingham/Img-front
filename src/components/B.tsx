'use client';

import { useEffect, useState } from 'react';
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

export default function ComponentB() {
  const [wordsets, setWordsets] = useState<string[][]>([]);
  const [filename, setFilename] = useState<string | null>(null);

  useEffect(() => {
    async function loadLatestWordset() {
      const { data: files } = await supabase.storage
        .from('wordsets')
        .list('', {
          limit: 100,
          sortBy: { column: 'name', order: 'desc' }
        });

      const latest = files?.find(f => f.name.endsWith('.json'));
      if (!latest) return;

      setFilename(latest.name);

      const { data: fileData } = await supabase.storage
        .from('wordsets')
        .download(latest.name);

      const text = await fileData!.text();
      const parsed = JSON.parse(text);
      if (Array.isArray(parsed.wordsets)) {
        setWordsets(parsed.wordsets.slice(0, 10));
      }
    }

    loadLatestWordset();
  }, []);

  return (
    <div className="space-y-6 text-gray-800 text-sm leading-relaxed border border-gray-200 rounded-lg p-6 bg-white shadow-sm">
      <div>
        <h3 className="text-lg font-semibold mb-2 text-blue-900">serverB.js Output Inspector</h3>
        <p>
          This section verifies and displays wordset output generated by the backend process <code>serverB.js</code>.
          That process continuously constructs new prompt arrays by randomly sampling one value per column from the
          Supabase table <code>prompt_components</code>, using the following fields:
        </p>
        <ul className="list-disc list-inside pl-4 mt-2">
          <li>noun1</li>
          <li>noun2</li>
          <li>verb</li>
          <li>adjective1</li>
          <li>adjective2</li>
          <li>style</li>
          <li>setting</li>
          <li>era</li>
          <li>mood</li>
        </ul>
        <p className="mt-4">
          20 of these assembled prompt arrays are uploaded into the Supabase bucket <code>wordsets/</code> as
          JSON files with timestamped filenames.
        </p>
      </div>

      <div className="bg-gray-50 border rounded p-4">
        <div className="text-xs text-gray-600 mb-2">
          <span className="font-medium">File loaded:</span> <code>{filename}</code>
        </div>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-2 font-mono text-xs text-gray-700">
          {wordsets.map((set, i) => (
            <div key={i} className="bg-white border rounded p-2 shadow-sm">
              [{set.map(word => `"${word}"`).join(', ')}]
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}
